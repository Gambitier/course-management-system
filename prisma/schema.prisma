generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  ADMIN
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

model User {
  id              String             @id @default(uuid()) @db.Uuid
  prefix          String             @db.VarChar(10)
  firstName       String             @db.VarChar(50)
  middleName      String?            @db.VarChar(50)
  lastName        String             @db.VarChar(50)
  email           String             @unique @db.VarChar(100)
  phone           String             @unique @db.VarChar(15)
  password        String             @db.VarChar(256)
  gender          Gender             @default(UNSPECIFIED)
  dateOfBirth     DateTime?          @db.Timestamptz(6)
  createdAt       DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime           @updatedAt @db.Timestamptz(6)
  deleted         DateTime?          @db.Timestamptz(6)
  userRoles       UserRole[]
  coursesEnrolled CourseEnrollment[]
  coursesCreated  Course[]           @relation(name: "CourseCreatedByUser")
  coursesApproved Course[]           @relation(name: "CourseApprovedByUser")
}

model UserRole {
  id        String    @id @default(uuid()) @db.Uuid
  role      Role      @default(EMPLOYEE)
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deleted   DateTime? @db.Timestamptz(6)
}

model Course {
  id               String             @id @default(uuid()) @db.Uuid
  title            String             @db.VarChar(500)
  description      String
  videoUrl         String             @db.VarChar(2048)
  topics           String[]
  durationMinutes  Int
  category         String             @db.VarChar(100)
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime           @updatedAt @db.Timestamptz(6)
  deleted          DateTime?          @db.Timestamptz(6)
  enrollments      CourseEnrollment[]
  createdBy        User               @relation(name: "CourseCreatedByUser", fields: [createdByUserId], references: [id])
  createdByUserId  String             @db.Uuid
  approvedBy       User?              @relation(name: "CourseApprovedByUser", fields: [approvedByUserId], references: [id])
  approvedByUserId String?            @db.Uuid
  approvedAt       DateTime?          @db.Timestamptz(6)
  courseMaterials  CourseMaterial[]
}

model CourseEnrollment {
  id             String                   @id @default(uuid()) @db.Uuid
  createdAt      DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime                 @updatedAt @db.Timestamptz(6)
  deleted        DateTime?                @db.Timestamptz(6)
  user           User                     @relation(fields: [userId], references: [id])
  userId         String                   @db.Uuid
  course         Course                   @relation(fields: [courseId], references: [id])
  courseId       String                   @db.Uuid
  progress       CourseMaterialProgress[]
  progressReward CourseProgressReward?

  @@unique([userId, courseId])
}

model CourseMaterial {
  id               String                   @id @default(uuid()) @db.Uuid
  createdAt        DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                 @updatedAt @db.Timestamptz(6)
  deleted          DateTime?                @db.Timestamptz(6)
  course           Course                   @relation(fields: [courseId], references: [id])
  courseId         String                   @db.Uuid
  title            String                   @db.VarChar(200)
  pdfUrl           String?                  @db.VarChar(2048)
  videoUrl         String?                  @db.VarChar(2048)
  quizUrl          String?                  @db.VarChar(2048)
  userProgressInfo CourseMaterialProgress[]
}

model CourseMaterialProgress {
  id                 String           @id @default(uuid()) @db.Uuid
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(6)
  deleted            DateTime?        @db.Timestamptz(6)
  courseMaterial     CourseMaterial   @relation(fields: [courseMaterialId], references: [id])
  courseMaterialId   String           @db.Uuid
  courseEnrollment   CourseEnrollment @relation(fields: [courseEnrollmentId], references: [id])
  courseEnrollmentId String           @db.Uuid
  progressPercentage Int

  @@unique([courseMaterialId, courseEnrollmentId])
}

model CourseProgressReward {
  id                 String           @id @default(uuid()) @db.Uuid
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(6)
  deleted            DateTime?        @db.Timestamptz(6)
  courseEnrollment   CourseEnrollment @relation(fields: [courseEnrollmentId], references: [id])
  courseEnrollmentId String           @unique @db.Uuid
  progressPercentage Int
  rewardPoints       Int
}
